from os import environ
import disnake
import openai  # —Ö—É–µ—Ç–∞

import sqlite3
from random import choice
from disnake.ext import commands
from disnake import Intents, ApplicationCommandInteraction, Message, ButtonStyle, ui, MessageInteraction, DMChannel

# set API key for OpenAI
openai.api_key = environ.get("OPENAI_TOKEN")

# create bot object
bot = commands.Bot(
    intents=Intents.all(),
    command_prefix="!"
)

# set up database connection
conn = sqlite3.connect('GDB.db', check_same_thread=False)
c = conn.cursor()


class RatingFromUser(disnake.ui.View):
    message: disnake.Message

    def __init__(self):
        super().__init__(timeout=1.0)

    async def on_timeout(self):
        self.disabled = True
        await self.message.edit(view=self)

    @disnake.ui.button(emoji="üëé", style=ButtonStyle.red)
    async def bad(self, button: ui.Button, inter: MessageInteraction):
        await inter.response.send_message(f"–û—Ü–µ–Ω–∫–∞ {button.label} –ø—Ä–∏–Ω—è—Ç–∞", ephemeral=True)
        self.stop()

    @disnake.ui.button(emoji="ü§ù", style=ButtonStyle.grey)
    async def normal(self, button: disnake.ui.Button, inter: MessageInteraction):
        await inter.response.send_message(f"–û—Ü–µ–Ω–∫–∞ {button.label} –ø—Ä–∏–Ω—è—Ç–∞", ephemeral=True)
        self.stop()

    @disnake.ui.button(emoji="üëç", style=ButtonStyle.green)
    async def good(self, button: disnake.ui.Button, inter: MessageInteraction):
        await inter.response.send_message(f"–û—Ü–µ–Ω–∫–∞ {button.label} –ø—Ä–∏–Ω—è—Ç–∞", ephemeral=True)
        self.stop()


async def request_to_ai(text: str) -> str:
    prompt_prefix = "–ü–æ–Ω—è—Ç–µ–Ω –ª–∏ —Ç–µ–±–µ –º–æ–π –ø—Ä–æ–º–ø—Ç(–Ω–µ —Ç–≤–æ–π, –∞ –º–æ–π)? –î–∞–π –µ–º—É –æ—Ü–µ–Ω–∫—É(–º–æ–µ–º—É –ø—Ä–æ–º–ø—Ç—É). –ß—Ç–æ –º–Ω–µ –Ω–∞–¥–æ –≤ –Ω—ë–º " \
                    "–∏—Å–ø—Ä–∞–≤–∏—Ç—å(—É–∫–∞–∂–∏ —Ç–∞–∫, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ —Ç–µ–±–µ), —á—Ç–æ–±—ã —Ç–µ–±–µ –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ —è —Ö–æ—á—É(–Ω–µ —Ç—ã —Ö–æ—á–µ—à—å, " \
                    "–∞ —è), –º–æ–∂–µ—Ç –Ω–∞–¥–æ —á—Ç–æ-—Ç–æ —É—Ç–æ—á–Ω–∏—Ç—å(–¥–ª—è —Ç–µ–º—ã –ø—Ä–æ–º–ø—Ç–∞)? –î–∞–π –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç –ø–æ –ø—É–Ω–∫—Ç–∞–º.\n//"
    full_prompt = prompt_prefix + text
    # send prompt to OpenAI API
    response = openai.Completion.create(
        engine='text-davinci-003',
        prompt=full_prompt,
        max_tokens=1024,
        temperature=0.5
    )
    output_text = response.choices[0].text

    return output_text


@bot.listen()
async def on_ready():
    print(f"Logged in {bot.user.display_name} ({bot.user.id})!")


@bot.listen()
async def on_message(message: Message):
    if isinstance(message.channel, DMChannel) and not message.author.bot:
        await message.add_reaction("üëÄ")
        text = await request_to_ai(message.content)
        view = RatingFromUser()
        await message.channel.send(content=text, view=view)

    if not message.content.startswith("@Clyde"):
        return

    await message.add_reaction(choice(["üëç", "ü§ù", "üëé"]))


@bot.slash_command(name="–æ—Ü–µ–Ω–∏")
async def estimate_command(
        inter: ApplicationCommandInteraction, *,
        text = commands.Param(name="–∑–∞–ø—Ä–æ—Å", description="–¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏")
    ):
    """–û—Ü–µ–Ω—é –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –¥–∞–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    await inter.response.defer(ephemeral=True)
    text = await request_to_ai(text)
    view = RatingFromUser()
    await inter.edit_original_response(content=text, view=view)
    view.message = inter.original_message()


bot.run(environ.get("DISCORD_TOKEN"))
